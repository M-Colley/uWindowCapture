name: Create Release and Publish Package

on:
  # 1. Trigger when a new tag starting with 'v' is pushed (e.g., v1.2.0)
  push:
    tags:
      - v*
  # 2. Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to publish and release (e.g., 1.2.0)'
        required: true
        type: string

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    permissions:
      # Required for pushing the UPM branch AND creating the GitHub Release
      contents: write
      # Required for publishing the package to the GitHub Packages registry
      packages: write

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Fetches all history, which is needed for the UPM branch action
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Run unit tests
        run: dotnet test Tests/uWindowCapture.Tests/uWindowCapture.Tests.csproj --configuration Release

      # Step 2: Determine the version number from the trigger (tag or manual input)
      - name: Get Version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      # Step 3: Create the dedicated branch for Unity Package Manager (UPM)
      - name: Create UPM Branch
        uses: hecomi/create-upm-branch-action@main
        with:
          git-tag: ${{ steps.get_version.outputs.version }}
          pkg-root-dir-path: Assets/uWindowCapture
          main-branch: master

      # Step 4: Set up Node.js environment for publishing to GitHub Packages
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          registry-url: 'https://npm.pkg.github.com'
          scope: '@m-colley'

      # Step 5: Publish the package to GitHub Packages
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Create the formal GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: elgohr/Github-Release-Action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            Official release and package publication for version ${{ steps.get_version.outputs.version }}.
            
            The npm package has been published to the GitHub Packages registry.
          draft: false
          prerelease: false
